import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class Esolang_Interpreters2 {
    //https://www.codewars.com/kata/58678d29dbca9a68d80000d7/java
    public static class Smallfuck {
        public static String interpreter(String code, String tape) {
//            System.out.println("Code: " + code + " tape: " + tape);
            StringBuilder result = new StringBuilder(tape);
            int i = 0;
            for (int k = 0; k < code.length() && i >= 0 && i < tape.length(); k++) {
                char value = result.charAt(i);
                switch (code.charAt(k)) {
                    case '*':
                        value = value == '0' ? '1' : '0';
                        result.replace(i, i + 1, String.valueOf(value));
                        break;
                    case '>':
                        i++;
                        break;
                    case '<':
                        i--;
                        break;
                    case '[':
                        if(value == '0') {
                            Stack<Character> stack = new Stack<>();
                            while (k + 1 < code.length()) {
                                char command = code.charAt(++k);
                                if(command == ']') {
                                    if (stack.isEmpty())
                                        break;
                                    else
                                        stack.pop();
                                }else if(command == '[')
                                    stack.add(command);
                            }
                        }
                        break;
                    case ']':
                        if(value == '1'){
                            Stack<Character> stack = new Stack<>();
                            while (k > 0){
                                char command = code.charAt(--k);
                                if(command == '[') {
                                    if (stack.isEmpty())
                                        break;
                                    else
                                        stack.pop();
                                } else if(command == ']')
                                    stack.push(command);
                            }
                        }
                        break;
                }
            }
            return result.toString();
        }
    }
    @Test
    public void testExamples() {
//         Flips the leftmost cell of the tape
        assertEquals("10101100", Smallfuck.interpreter("*", "00101100"));

        // Flips the second and third cell of the tape
        assertEquals("01001100", Smallfuck.interpreter(">*>*", "00101100"));
//
//        // Flips all the bits in the tape
        assertEquals("11010011", Smallfuck.interpreter("*>*>*>*>*>*>*>*", "00101100"));
//
//        // Flips all the bits that are initialized to 0
        assertEquals("11111111", Smallfuck.interpreter("*>*>>*>>>*>*", "00101100"));
//
//        // Goes somewhere to the right of the tape and then flips all bits that are initialized to 1, progressing leftwards through the tape
        assertEquals("00000000", Smallfuck.interpreter(">>>>>*<*<<*", "00101100"));
    }

    @Test
    public void failingTests(){

//        assertEquals("1001101000000111", Smallfuck.interpreter("*>>>*>*>>*>>>>>>>*>*>*>*>>>**>>**", "0000000000000000"));

        //[1100101011000111]
        //[0000000110111110]

                                                            //                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            1100101011000111


//        assertEquals
//                , Smallfuck.interpreter


        assertEquals("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
                , Smallfuck.interpreter("*[>*]", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
    }
}
